Question: what does the app use the Python AST library for and how does it use it?
Answer: Based on the code provided, the Python Abstract Syntax Tree (AST) library is used in several ways:

1. Parsing Python code:
   The CodeAnalyzer class inherits from ast.NodeVisitor, which allows it to traverse and analyze the AST of Python code. This is used to extract information about imports, classes, functions, and function calls in the analyzed Python file.

2. Visiting specific node types:
   The CodeAnalyzer class implements visit methods for specific AST node types:
   - visit_ImportFrom: Handles "from ... import ..." statements
   - visit_ClassDef: Extracts information about class definitions
   - visit_FunctionDef: Processes function definitions
   - visit_Call: Analyzes function calls within the code

3. Extracting code information:
   - The ast.unparse() function is used to convert AST nodes back into Python code strings, particularly for extracting function code.

4. Identifying built-in functions:
   The code checks if function names are built-in by comparing them against the builtins module and the ast module's dir().

5. Analyzing attribute chains:
   The get_attribute_chain method recursively traverses ast.Attribute nodes to build a chain of attribute accesses (e.g., "object.attribute1.attribute2").

6. Handling subscript expressions:
   The get_subscript_base method analyzes ast.Subscript nodes to extract the base object being subscripted.

Overall, the AST library is used to perform static analysis of Python code, allowing the application to extract detailed information about the structure and contents of Python files without executing them. This information is then used to build a graph of dependencies, function calls, and code references within the analyzed Python project.

